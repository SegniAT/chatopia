package templates

templ VideoChat() {
	<script>
		let isConnectedMessage=(message)=>{
			message = message.toLowerCase()
			return message.includes("connection_status") && message.includes("connected")
		}

		let isDisconnectedMessage=(message)=>{
			message = message.toLowerCase()
			return message.includes("connection_status") && message.includes("disconnected")
		}

		let isPeerIdCallerMessage = (message)=>{
			message=message.toLowerCase(message)
			return message.includes("peer_id_caller")
		}

		let isPeerIdPartnerMessage = (message)=>{
			message=message.toLowerCase(message)
			return message.includes("peer_id_partner")
		}

		let isCaller = (message)=>{
			return isPeerIdPartnerMessage(message)
		}

		let addVideoStream = (videoElement, stream) => {
			videoElement.srcObject = stream
			videoElement.addEventListener('loadedmetadata', () => {
				videoElement.play()
			})
		}


		document.addEventListener("DOMContentLoaded",(e)=> {
			let localVideo= document.querySelector("#local_video")
			let remoteVideo= document.querySelector("#remote_video")

			const peer = null


			document.body.addEventListener("htmx:wsOpen", (event) => {
				let socketWrapper = event.detail.socketWrapper
				let peer = null
				
				document.body.addEventListener("htmx:wsAfterMessage", (event) => {
					let message = event.detail.message

					// PEER ID accepted
					if (isPeerIdCallerMessage(message) || isPeerIdPartnerMessage(message)){
						// get the ID
						let parsedMessage = JSON.parse(message)
						let parsedChatMessage = JSON.parse(parsedMessage["chat_message"])

						const ID = parsedChatMessage['id'] 
						peer = new Peer(ID, {
							host:'/',
							port:'9000'
						})

						// make call if you're the caller
						// else listen for calls

						if (localVideo){
							navigator.mediaDevices.getUserMedia({
								video:true, 
								audio:true
							}).then(stream => {
								addVideoStream(localVideo, stream)

								if (isCaller(message)) {
									const partnerPeerId = parsedChatMessage['partner_id']
									const call = peer.call(partnerPeerId, stream)
									call.on('stream', partnerStream => {
										if (remoteVideo) {
											addVideoStream(remoteVideo, partnerStream)
										}
									})
									call.on('close', ()=> {
										if (remoteVideo) {
											remoteVideo.srcObject = null 
										}
									})
								}else {
									const callerPeerId= parsedChatMessage['caller_id']
									peer.on('call', call => {
										call.answer(stream)

										call.on('stream', callerStream => {
											if (remoteVideo) {
												addVideoStream(remoteVideo, callerStream)
											}
										})
									})
								}
							})
						}
					}	

					if (isDisconnectedMessage(message) && peer) {
						peer.close()	
					}
				})

			});
			
			document.body.addEventListener("htmx:wsClose", (event) => {
			});
		})
	</script>
	<div class="flex flex-col gap-2">
		<div>
			<video id="local_video" class="h-80 w-80 border-2 rounded-md border-chatopia-3" autoplay muted></video>
		</div>
		<div>
			<video id="remote_video" class="h-80 w-80 border-2 rounded-md border-chatopia-3" autoplay muted></video>
		</div>
	</div>
}
