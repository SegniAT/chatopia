package templates

templ Home(title string) {
	<script>
		document.addEventListener("DOMContentLoaded",(e)=> {
			const interestsInput = document.querySelector("#interests_input")
			const remove_interest_tablet = document.querySelector(".remove_interest_tablet")
			const SEPARATOR = "|"

			let showError=(error)=>{
				const errInterests = document.querySelector("#interests_error")
				const errInterestsClassList = errInterests.classList
				errInterests.innerText = error
				errInterestsClassList.remove("hidden")
				errInterestsClassList.add("block")
			}

			let hideError=()=> {
				const errInterests = document.querySelector("#interests_error")
				const errInterestsClassList = errInterests.classList
				errInterests.innerText = ""
				errInterestsClassList.add("hidden")
				errInterestsClassList.remove("block")
			}

			let updateValues = () => {
				const interestsVideo = document.querySelector("#interests_video")
				const interestsText = document.querySelector("#interests_text")
				const interest_tablets = document.querySelector("#interest_tablets")

				let interests = []	
				interest_tablets.childNodes.forEach(node => {
					let text = node.textContent
					if(text.length > 0) {
						text = text.slice(0, text.length-1)
					}

					try {
						text = validateInterest(text)
					}catch(err){
						showError(err)
						return
					}

					interests.push(text)
				})

				interestsVideo.value = interests.join(SEPARATOR)
				interestsText.value = interests.join(SEPARATOR)
			}

			let validateInterest = (interest) => {
				const interest_tablets = document.querySelector("#interest_tablets")
				const errInterestsClassList = document.querySelector("#interests_error").classList

				// check if 3<
				if (interest_tablets.childElementCount>= 3) {
					throw "maximum of only 3 interests allowed"
				}else {
					hideError()
				}

				let newInterest = interest.trim().toLowerCase().replaceAll(SEPARATOR, "_")
				if(newInterest.length == 0) {
					throw "interest too short (min 1 character)"
				}

				if (newInterest.length > 25) {
					throw "interest too long (max 25 characters)"
				}

				return newInterest
			}
			
			let initializeInterests = () => {
				const interest_tablets = document.querySelector("#interest_tablets")
				const interestsInput = document.querySelector("#interests_input")		

				if (interestsInput){
					interestsInput.addEventListener("keydown", (e) => {
						if (e.key==="Enter"){
							e.preventDefault()
						
							let newInterest = e.target.value

							try {
								newInterest = validateInterest(newInterest)	
							}catch(err){
								showError(err)
								return
							}

							const interestTablet = document.createElement("div")

							const interestTabletRemove = document.createElement("span")
							interestTabletRemove .classList.add("remove_interest_tablet")
							interestTabletRemove.textContent = "x"
	
							let tabletStyle = "flex justify-center items-center pl-2 h-6 bg-chatopia-2 border-l border-chatopia-3 shadow-sm shadow-chatopia-3 rounded-md"
							let tabletRemoveStyle = "flex items-center font-bold text-md h-full ml-2 px-1 rounded-md rounded-l-none bg-red-600 text-chatopia-5 cursor-pointer"	

							interestTablet.classList.add(...tabletStyle.split(" "))
							interestTabletRemove.classList.add(...tabletRemoveStyle.split(" "))

							interestTablet.textContent = newInterest
							interestTablet.appendChild(interestTabletRemove)

							interest_tablets.appendChild(interestTablet)

							e.target.value = ""
						
							updateValues()

							interestTabletRemove.addEventListener("click", ()=>{
								interest_tablets.removeChild(interestTablet)
								updateValues()
							})
						}
					});
				}

				const remove_interest_tablet = document.querySelectorAll(".remove_interest_tablet")
				remove_interest_tablet.forEach(button => {
					button.addEventListener("click", (e) => {
						const tablet = e.target.parentElement
						if (tablet) {
							interest_tablets.removeChild(tablet)
							updateValues()
						}
					})
				})
			} // initializeInterests

			initializeInterests()

			// Reinitialize the interests when the form is re-rendered
			document.querySelector("#interest_form").addEventListener("htmx:afterSwap", (e) => {
				initializeInterests()
			})

		});

	</script>
	@Base(title) {
		<div class="pb-10 pt-20 flex flex-col lg:flex-row justify-between items-center">
			<div class="lg:order-2">
				<img class="max-w-lg" src="/assets/logo.png" alt="chatopia logo"/>
			</div>
			<div class="lg:order-1">
				<h1 class="text-4xl lg:text-5xl py-20 font-thin">Looking for love (or just a good laugh)? Get on <span class="text-chatopia-1 font-bold">Chatopia</span>, Ethiopia's answer to boredom! </h1>
			</div>
		</div>
		<div>
			<p class="">Start chatting:</p>
			<div class="flex justify-start gap-2 p-2">
				<form hx-post="/chat/video" hx-target="#interest_form">
					<input id="interests_video" class="hidden" type="text" name="interests"/>
					<button class="rounded-md border-2 border-chatopia-1 bg-chatopia-2 text-chatopia-1 py-1 px-4 font-semibold" type="submit">Video</button>
				</form>
				<form hx-post="/chat/text" hx-target="#interest_form">
					<input id="interests_text" class="hidden" type="text" name="interests"/>
					<button class="rounded-md border-2 border-chatopia-3 bg-chatopia-3 text-chatopia-5 py-1 px-5 font-semibold" type="submit">Text</button>
				</form>
			</div>
			<div id="interest_form">
				@InterestInput([]string{}, nil)
			</div>
		</div>
	}
}

templ InterestInput(interests []string, interestsError error) {
	<p>Interests (optional):</p>
	<div class="flex flex-col items-start">
		<div id="interest_tablets" class="flex gap-2 py-2">
			for _, interest := range interests {
				<span class="flex justify-center items-center pl-2 h-6 bg-chatopia-2 border-l border-chatopia-3 shadow-sm shadow-chatopia-3 rounded-md">
					{ interest }
					<span class="flex items-center font-bold text-md h-full ml-2 px-1 rounded-md rounded-l-none bg-red-600 text-chatopia-5 cursor-pointer">x</span>
				</span>
			}
		</div>
		<textarea id="interests_input" class="border border-chatopia-3 focus:border-chatopia-1 p-2 bg-chatopia-2 resize" placeholder="Enter your interests..." maxlength="25"></textarea>
		<span id="interests_error" class="block text-red-600 text-sm">
			if interestsError != nil {
				{ interestsError.Error() }
			}
		</span>
	</div>
}
