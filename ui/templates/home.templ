package templates

templ Home(title string, isStrict bool, interests []string) {
	<script>
		let showError=(error)=>{
			const errInterests = document.querySelector("#interests_error")
			const errInterestsClassList = errInterests.classList
			errInterests.innerText = error
			errInterestsClassList.remove("hidden")
			errInterestsClassList.add("block")
		}

		let hideError=()=> {
			const errInterests = document.querySelector("#interests_error")
			const errInterestsClassList = errInterests.classList
			errInterests.innerText = ""
			errInterestsClassList.add("hidden")
			errInterestsClassList.remove("block")
		}

		let validateInterest = (interest) => {
			const interest_pills = document.querySelector("#interest_pills")
			const errInterestsClassList = document.querySelector("#interests_error").classList

			// check if 3<
			if (interest_pills.childElementCount == 3) {
				throw "maximum of only 3 interests allowed"
			}else {
				hideError()
			}
			let newInterest = interest.trim().toLowerCase()
			if(newInterest.length == 0) {
				throw "interest too short (min 1 character)"
			}

			if (newInterest.length > 25) {
				throw "interest too long (max 25 characters)"
			}

			return newInterest
		}

		let addInterestPill = (newInterest) => {
			const interestPill = document.createElement("div")
			const interestPillRemove = document.createElement("span")
			interestPillRemove .classList.add("remove_interest_pill")
			interestPillRemove.textContent = "x"
	
			let pillStyle = "flex justify-center items-center pl-2 h-6 bg-chatopia-2 border-l border-chatopia-3 shadow-sm shadow-chatopia-3 rounded-md"
			let pillRemoveStyle = "flex items-center font-bold text-md h-full ml-2 px-1 rounded-md rounded-l-none bg-red-600 text-chatopia-5 cursor-pointer"	

			interestPill.classList.add(...pillStyle.split(" "))
			interestPillRemove.classList.add(...pillRemoveStyle.split(" "))

			interestPill.textContent = newInterest
			interestPill.appendChild(interestPillRemove)

			interest_pills.appendChild(interestPill)
			
			interestPillRemove.addEventListener("click", () => {
				interestPill.remove()
			})
		}

		let initializeInterests = () => {
			const interest_pills = document.querySelector("#interest_pills")
			const interestsInput = document.querySelector("#interests_input")

			if (interestsInput){
				interestsInput.addEventListener("keydown", (e) => {
					if (e.key==="Enter"){
						e.preventDefault()

						let newInterest = e.target.value

						try {
							newInterest = validateInterest(newInterest)
						}catch(err){
							showError(err)
							return
						}

						addInterestPill(newInterest)
						e.target.value = ""
					}
				});
			}

			const remove_interest_pill = document.querySelectorAll(".remove_interest_pill")

			remove_interest_pill.forEach(removeSpan => {
				removeSpan.addEventListener("click", (e) => {
					const pill = e.target.parentElement
					if (pill) {
						pill.remove()
					}
				})
			})
		}

		let getInterestsFromPills=()=>{
			const interest_pills = document.querySelector("#interest_pills")
			let interests = []

			if(!interest_pills) {
				console.log("can't find interest pills container element")
				return interests
			}

			interest_pills.childNodes.forEach(node => {
				let text = node.textContent
				if(text.length > 0) {
					// cut out the 'X'
					text = text.slice(0, text.length-1)
				}
				interests.push(text)
			})
			return interests
		}

		let getStrictValue = () => {
			const strict_checkbox = document.querySelector("#strict_checkbox")
			return strict_checkbox.checked
		}

		let setStrictValue = (isChecked) => {
			const strict_checkbox = document.querySelector("#strict_checkbox")
			strict_checkbox.checked = isChecked === "true"
		}

		let updateInterestsLocalStorage=()=>{
			let interests = getInterestsFromPills()
			let isStrict = getStrictValue()
			localStorage.setItem("interests", JSON.stringify(interests))
			localStorage.setItem("isStrict", isStrict)
		}

		let loadInterestsFromLocalStorage=()=>{
			let savedInterests = localStorage.getItem("interests")
			if (!savedInterests) {
				return
			}

			savedInterests = JSON.parse(savedInterests)
			let len = savedInterests.length

			if(len> 3) {
				savedInterests = savedInterests.slice(0, 3)
				return
			}

			
			savedInterests.forEach(interest => addInterestPill(interest))
		}

		let loadIsStrictFromLocalStorage=()=>{
			let isStrict = localStorage.getItem("isStrict")
			if (!(isStrict === "false" || isStrict === "true")){
				return
			}
			
			setStrictValue(isStrict)
		}


		document.addEventListener("DOMContentLoaded",(e)=> {
			const interestsInput = document.querySelector("#interests_input")
			const remove_interest_pill = document.querySelector(".remove_interest_pill")

			// load previously submitted interests
			loadInterestsFromLocalStorage(interestsInput)

			// load previously submitted isStrict
			loadIsStrictFromLocalStorage()
			
			// Reinitialize the interests listeners on first load
			initializeInterests()

			// Reinitialize the interests listeners when the form is re-rendered
			document.querySelector("#interest_form").addEventListener("htmx:afterSwap", (e) => {
				initializeInterests()
			})

			// remember the users interests
			document.querySelectorAll("#video_chat_form, #text_chat_form").forEach(form => {
				form.addEventListener("htmx:beforeRequest", (e) => {
					updateInterestsLocalStorage()
				});

			})
		});

	</script>
	@Base(title) {
		<div class="pb-10 pt-20 flex flex-col lg:flex-row justify-between items-center relative bg-chatopia-2">
			<div class="lg:order-2">
				<img
					class="hidden sm:block w-40 lg:w-80"
					src="/assets/hero.webp"
					alt="chatopia logo"
				/>
			</div>
			<div class="lg:order-1">
				<h1 class="text-4xl lg:text-5xl py-20 font-thin">
					Looking for love (or just a good laugh)? Get on
					<span class="text-chatopia-1 font-bold">Chatopia</span>,
					Ethiopia's answer to boredom!
				</h1>
			</div>
		</div>
		<div>
			<p class="">Start chatting:</p>
			<div class="flex justify-start gap-2 p-2">
				<form
					id="video_chat_form"
					hx-post="/chat/video"
					hx-target="#interest_form"
					hx-vals='js:{
						"interests[]": getInterestsFromPills(),
						"isStrict": getStrictValue()
					}'
				>
					<button class="rounded-md border-2 border-chatopia-1 bg-chatopia-2 text-chatopia-1 py-1 px-4 font-semibold" type="submit">Video</button>
				</form>
				<form
					id="text_chat_form"
					hx-post="/chat/text"
					hx-target="#interest_form"
					hx-vals='js:{
						"interests[]": getInterestsFromPills(),
						"isStrict": getStrictValue()
					}'
				>
					<button class="rounded-md border-2 border-chatopia-3 bg-chatopia-3 text-chatopia-5 py-1 px-5 font-semibold" type="submit">Text</button>
				</form>
			</div>
			<div class="py-2 flex items-center gap-1">
				if isStrict {
					<input id="strict_checkbox" name="strict" type="checkbox" checked/>
				} else {
					<input id="strict_checkbox" name="strict" type="checkbox"/>
				}
				<label for="strict_checkbox">strict <span class="text-chatopia-4">(atleast 1 common interest)</span></label>
			</div>
			<div id="interest_form">
				@InterestInput(interests, nil)
			</div>
		</div>
	}
}

templ InterestInput(interests []string, interestsError error) {
	<p>Interests <span class="text-chatopia-4">(optional)</span>:</p>
	<div class="flex flex-col items-start">
		<div id="interest_pills" class="flex gap-2 py-2">
			for _, interest := range interests {
				<span class="flex justify-center items-center pl-2 h-6 bg-chatopia-2 border-l border-chatopia-3 shadow-sm shadow-chatopia-3 rounded-md">
					{ interest }
					<span class="flex items-center font-bold text-md h-full ml-2 px-1 rounded-md rounded-l-none bg-red-600 text-chatopia-5 cursor-pointer">x</span>
				</span>
			}
		</div>
		<textarea id="interests_input" class="border border-chatopia-3 focus:border-chatopia-1 p-2 bg-chatopia-2 resize" placeholder="Enter your interests..." maxlength="25"></textarea>
		<span id="interests_error" class="block text-red-600 text-sm">
			if interestsError != nil {
				{ interestsError.Error() }
			}
		</span>
	</div>
}
